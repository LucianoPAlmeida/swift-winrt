// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

import Ctest_component

private var IID___x_ABI_Ctest__component_CIBasic: IID {
    IID(Data1: 0x636060A1, Data2: 0xE41D, Data3: 0x59DF, Data4: ( 0xA5,0xD3,0xFB,0x7C,0xE7,0xE1,0x79,0x2F ))// 636060A1-E41D-59DF-A5D3-FB7CE7E1792F
}

private var IID___x_ABI_Ctest__component_CIClass: IID {
    IID(Data1: 0x0AEB74AA, Data2: 0x2483, Data3: 0x540D, Data4: ( 0x92,0x3C,0x10,0xEC,0x5A,0x86,0xC9,0xA9 ))// 0AEB74AA-2483-540D-923C-10EC5A86C9A9
}

private var IID___x_ABI_Ctest__component_CIClassFactory: IID {
    IID(Data1: 0x44D80DD3, Data2: 0x3375, Data3: 0x5BC4, Data4: ( 0xBB,0xF6,0xAE,0x61,0x3D,0xE0,0x19,0x70 ))// 44D80DD3-3375-5BC4-BBF6-AE613DE01970
}

private var IID___x_ABI_Ctest__component_CIClassFactory2: IID {
    IID(Data1: 0xF5F62EBE, Data2: 0x931B, Data3: 0x519B, Data4: ( 0x95,0x1A,0xF1,0x4A,0x4B,0xC7,0x83,0xB1 ))// F5F62EBE-931B-519B-951A-F14A4BC783B1
}

private var IID___x_ABI_Ctest__component_CIClassStatics: IID {
    IID(Data1: 0x2E573677, Data2: 0xD7B8, Data3: 0x5305, Data4: ( 0x8F,0x9D,0x1B,0x23,0x15,0xE3,0x77,0x8B ))// 2E573677-D7B8-5305-8F9D-1B2315E3778B
}

private var IID___x_ABI_Ctest__component_CIClassStatics2: IID {
    IID(Data1: 0xB341C098, Data2: 0x033D, Data3: 0x5445, Data4: ( 0x86,0x80,0x70,0x3A,0x93,0xBC,0xDF,0x81 ))// B341C098-033D-5445-8680-703A93BCDF81
}

private var IID___x_ABI_Ctest__component_CIIAmImplementable: IID {
    IID(Data1: 0x037EC137, Data2: 0xC269, Data3: 0x584C, Data4: ( 0x9A,0x19,0xC7,0x31,0x3E,0x5F,0xD1,0x29 ))// 037EC137-C269-584C-9A19-C7313E5FD129
}

private var IID___x_ABI_Ctest__component_CISimple: IID {
    IID(Data1: 0x86F19B35, Data2: 0x7712, Data3: 0x5667, Data4: ( 0xA6,0x2D,0xA8,0xB2,0x42,0x5A,0x2E,0x9B ))// 86F19B35-7712-5667-A62D-A8B2425A2E9B
}

private var IID___x_ABI_Ctest__component_CISimpleDelegate: IID {
    IID(Data1: 0xB73AD784, Data2: 0xEADD, Data3: 0x54B7, Data4: ( 0xA6,0x8E,0x8A,0xC5,0x6E,0xAB,0x73,0x87 ))// B73AD784-EADD-54B7-A68E-8AC56EAB7387
}

private var IID___x_ABI_Ctest__component_CIStaticClassStatics: IID {
    IID(Data1: 0xC983253D, Data2: 0x876D, Data3: 0x55EE, Data4: ( 0x82,0x4B,0x01,0x24,0x6E,0xDC,0x61,0x2D ))// C983253D-876D-55EE-824B-01246EDC612D
}

private var IID___x_ABI_C__FIReference_1_int: IID {
    IID(Data1: 0x548cefbd, Data2: 0xbc8a, Data3: 0x5fa0, Data4: ( 0x8d,0xf2,0x95,0x74,0x40,0xfc,0x8b,0xf4 ))// 548cefbd-bc8a-5fa0-8df2-957440fc8bf4
}

public enum __ABI_test_component {
    private static var __x_ABI_C__FIReference_1_intVTable: __x_ABI_C__FIReference_1_intVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }
           if riid.pointee == __ABI_Windows_Foundation.IPropertyValueWrapper.IID {
                guard let instance = __x_ABI_C__FIReference_1_intWrapper.try_unwrap_from(raw: pUnk) as? Foundation.Impl.IPropertyValueImpl else { return E_NOINTERFACE }
                let inner = __ABI_Windows_Foundation.IPropertyValueWrapper(impl: instance)
                return withUnsafeMutablePointer(to: &inner.instance.comInterface) { pThis in 
                    pThis.pointee.lpVtbl.pointee.QueryInterface(pThis, riid, ppvObject)
                }
            }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == __x_ABI_C__FIReference_1_intWrapper.IID else { 
                ppvObject.pointee = nil
                return E_NOINTERFACE
            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = __x_ABI_C__FIReference_1_intWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = __x_ABI_C__FIReference_1_intWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __x_ABI_C__FIReference_1_intWrapper.IID
            iids[4] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID

            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Foundation.IReference`1<Int32>").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Value: {
            guard let instance = __x_ABI_C__FIReference_1_intWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }

            let result = instance.Value as! Int32
            $1?.initialize(to: result)

            return S_OK
        }
    )
    internal class __x_ABI_C__FIReference_1_intWrapper: WinRTWrapperBase<__x_ABI_C__FIReference_1_int, IReference> {
        override class var IID: IID { IID___x_ABI_C__FIReference_1_int }
        init?(value: Int32?) {
            guard let value = value else { return nil }
            let abi = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1_intVTable) {
                __x_ABI_C__FIReference_1_int(lpVtbl:$0)
            }
            super.init(abi, Foundation.Impl.IPropertyValueImpl(value: value))
        }
    }
    open class IBasic: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBasic }

        open func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIBasic.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }
    }

    private static var IBasicVTable: __x_ABI_Ctest__component_CIBasicVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == __ABI_test_component.IBasicWrapper.IID else { 
                ppvObject.pointee = nil
                return E_NOINTERFACE
            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = IBasicWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = IBasicWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IBasicWrapper.IID
            
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IBasic").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Method: {
            guard let instance = __ABI_test_component.IBasicWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }

            instance.Method()
            
            return S_OK
        }
    )

    public class IBasicWrapper: WinRTWrapperBase<__x_ABI_Ctest__component_CIBasic, test_component.IBasic> {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIBasic }
                
        public init?(impl: test_component.IBasic?) {
            guard let impl = impl else { return nil }
            // try to see if already wrapping an ABI pointer and if so, use that
            if let internalImpl = impl as? test_component.Impl.IBasicImpl {
                let abi = try? internalImpl.interface.perform(as: __x_ABI_Ctest__component_CIBasic.self) { $0.pointee }
                guard let abi = abi else { return nil }
                super.init(abi, impl)
            } else {
                let abi = withUnsafeMutablePointer(to: &IBasicVTable) {
                    __x_ABI_Ctest__component_CIBasic(lpVtbl: $0)
                }
                super.init(abi, impl)
            }
        }
    }
    open class IClass: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClass }

        internal func get_ImplementationImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Implementation(pThis, &value))
            }
            return value
        }
        internal func put_ImplementationImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Implementation(pThis, value))
            }
        }
        internal func SetDelegateImpl(_ value: UnsafeMutablePointer<__x_ABI_Ctest__component_CISimpleDelegate>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDelegate(pThis, value))
            }
        }
        internal func GetDelegateImpl() throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CISimpleDelegate>? {
            var result: UnsafeMutablePointer<__x_ABI_Ctest__component_CISimpleDelegate>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetDelegate(pThis, &result))
            }
            return result
        }
        internal func InInt32Impl(_ value: INT32) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32(pThis, value, &result))
            }
            return result
        }
        internal func InStringImpl(_ value: HSTRING?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InString(pThis, value, &result))
            }
            return result
        }
        internal func InEnumImpl(_ value: __x_ABI_Ctest__component_CSigned) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return result
        }
        internal func OutInt32Impl(_ value: inout INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32(pThis, &value))
            }
        }
        internal func OutStringImpl(_ value: inout HSTRING?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutString(pThis, &value))
            }
        }
        internal func OutBlittableStructImpl(_ value: inout __x_ABI_Ctest__component_CBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutBlittableStruct(pThis, &value))
            }
        }
        internal func OutNonBlittableStructImpl(_ value: inout __x_ABI_Ctest__component_CNonBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStruct(pThis, &value))
            }
        }
        internal func OutEnumImpl(_ value: inout __x_ABI_Ctest__component_CSigned) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnum(pThis, &value))
            }
        }
        internal func ReturnEnumImpl() throws -> __x_ABI_Ctest__component_CSigned {
            var result: __x_ABI_Ctest__component_CSigned = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnum(pThis, &result))
            }
            return result
        }
        internal func get_EnumPropertyImpl() throws -> __x_ABI_Ctest__component_CFruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }
        internal func put_EnumPropertyImpl(_ value: __x_ABI_Ctest__component_CFruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }
        internal func ReturnCharImpl() throws -> WCHAR {
            var result: WCHAR = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnChar(pThis, &result))
            }
            return result
        }
        internal func InCharImpl(_ value: WCHAR) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InChar(pThis, value, &result))
            }
            return result
        }
        internal func OutCharImpl(_ value: inout WCHAR) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutChar(pThis, &value))
            }
        }
        internal func get_StartValueImpl() throws -> UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>? {
            var value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartValue(pThis, &value))
            }
            return value
        }
        internal func put_StartValueImpl(_ value: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClass.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartValue(pThis, value))
            }
        }
    }

    open class IClassFactory: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClassFactory }

        internal func CreateInstanceImpl(_ name: HSTRING?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, name, &value))
            }
            return value
        }
        internal func CreateInstance2Impl(_ name: HSTRING?, _ fruit: __x_ABI_Ctest__component_CFruit) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, name, fruit, &value))
            }
            return value
        }
    }

    open class IClassFactory2: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClassFactory2 }

        internal func CreateInstanceImpl(_ name: HSTRING?, _ fruit: __x_ABI_Ctest__component_CFruit, _ implementation: UnsafeMutablePointer<__x_ABI_Ctest__component_CIIAmImplementable>?) throws -> UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>? {
            var value: UnsafeMutablePointer<__x_ABI_Ctest__component_CIClass>?
            _ = try perform(as: __x_ABI_Ctest__component_CIClassFactory2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, name, fruit, implementation, &value))
            }
            return value
        }
    }

    open class IClassStatics: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClassStatics }

        internal func StaticTestImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTest(pThis))
            }
        }
        internal func StaticTestReturnImpl() throws -> INT32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTestReturn(pThis, &result))
            }
            return result
        }
        internal func get_StaticPropertyImpl() throws -> INT32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StaticProperty(pThis, &value))
            }
            return value
        }
    }

    open class IClassStatics2: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIClassStatics2 }

        internal func StaticTestReturnFloatImpl() throws -> FLOAT {
            var result: FLOAT = 0.0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StaticTestReturnFloat(pThis, &result))
            }
            return result
        }
        internal func get_StaticPropertyFloatImpl() throws -> FLOAT {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StaticPropertyFloat(pThis, &value))
            }
            return value
        }
        internal func put_StaticPropertyFloatImpl(_ value: FLOAT) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIClassStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StaticPropertyFloat(pThis, value))
            }
        }
    }

    open class IIAmImplementable: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIIAmImplementable }

        open func InInt32Impl(_ value: INT32) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InInt32(pThis, value, &result))
            }
            return result
        }
        open func InStringImpl(_ value: HSTRING?) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InString(pThis, value, &result))
            }
            return result
        }
        open func InEnumImpl(_ value: __x_ABI_Ctest__component_CSigned) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return result
        }
        open func OutInt32Impl(_ value: inout INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutInt32(pThis, &value))
            }
        }
        open func OutStringImpl(_ value: inout HSTRING?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutString(pThis, &value))
            }
        }
        open func OutBlittableStructImpl(_ value: inout __x_ABI_Ctest__component_CBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutBlittableStruct(pThis, &value))
            }
        }
        open func OutNonBlittableStructImpl(_ value: inout __x_ABI_Ctest__component_CNonBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutNonBlittableStruct(pThis, &value))
            }
        }
        open func OutEnumImpl(_ value: inout __x_ABI_Ctest__component_CSigned) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OutEnum(pThis, &value))
            }
        }
        open func ReturnEnumImpl() throws -> __x_ABI_Ctest__component_CSigned {
            var result: __x_ABI_Ctest__component_CSigned = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnEnum(pThis, &result))
            }
            return result
        }
        open func get_EnumPropertyImpl() throws -> __x_ABI_Ctest__component_CFruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }
        open func put_EnumPropertyImpl(_ value: __x_ABI_Ctest__component_CFruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }
    }

    private static var IIAmImplementableVTable: __x_ABI_Ctest__component_CIIAmImplementableVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == __ABI_test_component.IIAmImplementableWrapper.IID else { 
                ppvObject.pointee = nil
                return E_NOINTERFACE
            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = IIAmImplementableWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = IIAmImplementableWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.IIAmImplementableWrapper.IID
            
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.IIAmImplementable").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        InInt32: {
            guard let instance = __ABI_test_component.IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: Int32 = $1

            let result = instance.InInt32(value)
            $2?.initialize(to: try! HString(result).detach())

            return S_OK
        },

        InString: {
            guard let instance = __ABI_test_component.IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)

            let result = instance.InString(value)
            $2?.initialize(to: try! HString(result).detach())

            return S_OK
        },

        InEnum: {
            guard let instance = __ABI_test_component.IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: test_component.Signed = $1

            let result = instance.InEnum(value)
            $2?.initialize(to: try! HString(result).detach())

            return S_OK
        },

        OutInt32: {
            guard let instance = __ABI_test_component.IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            var value: Int32 = 0
            instance.OutInt32(&value)
            $1?.initialize(to: value)

            return S_OK
        },

        OutString: {
            guard let instance = __ABI_test_component.IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            var value: String?
            instance.OutString(&value)
            $1?.initialize(to: try! HString(value).detach())

            return S_OK
        },

        OutBlittableStruct: {
            guard let instance = __ABI_test_component.IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            var value: test_component.BlittableStruct = .init()
            instance.OutBlittableStruct(&value)
            $1?.initialize(to: unsafeBitCast(value, to: __x_ABI_Ctest__component_CBlittableStruct.self))

            return S_OK
        },

        OutNonBlittableStruct: {
            guard let instance = __ABI_test_component.IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            var value: test_component.NonBlittableStruct = .init()
            instance.OutNonBlittableStruct(&value)
            let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
        	$1?.initialize(to: _value.detach())

            return S_OK
        },

        OutEnum: {
            guard let instance = __ABI_test_component.IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            var value: test_component.Signed = .init(0)
            instance.OutEnum(&value)
            $1?.initialize(to: value)

            return S_OK
        },

        ReturnEnum: {
            guard let instance = __ABI_test_component.IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }

            let result = instance.ReturnEnum()
            $1?.initialize(to: result)

            return S_OK
        },

        get_EnumProperty: {
            guard let instance = __ABI_test_component.IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }

            let value = instance.EnumProperty
            $1?.initialize(to: value)

            return S_OK
        },

        put_EnumProperty: {
            guard let instance = __ABI_test_component.IIAmImplementableWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let value: test_component.Fruit = $1

            instance.EnumProperty = value
            
            return S_OK
        }
    )

    public class IIAmImplementableWrapper: WinRTWrapperBase<__x_ABI_Ctest__component_CIIAmImplementable, test_component.IIAmImplementable> {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIIAmImplementable }
                
        public init?(impl: test_component.IIAmImplementable?) {
            guard let impl = impl else { return nil }
            // try to see if already wrapping an ABI pointer and if so, use that
            if let internalImpl = impl as? test_component.Impl.IIAmImplementableImpl {
                let abi = try? internalImpl.interface.perform(as: __x_ABI_Ctest__component_CIIAmImplementable.self) { $0.pointee }
                guard let abi = abi else { return nil }
                super.init(abi, impl)
            } else {
                let abi = withUnsafeMutablePointer(to: &IIAmImplementableVTable) {
                    __x_ABI_Ctest__component_CIIAmImplementable(lpVtbl: $0)
                }
                super.init(abi, impl)
            }
        }
    }
    open class ISimple: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CISimple }

        internal func MethodImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Method(pThis))
            }
        }
        internal func ReturnBlittableStructImpl() throws -> __x_ABI_Ctest__component_CBlittableStruct {
            var result: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnBlittableStruct(pThis, &result))
            }
            return result
        }
        internal func TakeBlittableStructImpl(_ value: __x_ABI_Ctest__component_CBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeBlittableStruct(pThis, value))
            }
        }
        internal func get_BlittableStructPropertyImpl() throws -> __x_ABI_Ctest__component_CBlittableStruct {
            var value: __x_ABI_Ctest__component_CBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlittableStructProperty(pThis, &value))
            }
            return value
        }
        internal func put_BlittableStructPropertyImpl(_ value: __x_ABI_Ctest__component_CBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlittableStructProperty(pThis, value))
            }
        }
        internal func ReturnNonBlittableStructImpl() throws -> __x_ABI_Ctest__component_CNonBlittableStruct {
            var result: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReturnNonBlittableStruct(pThis, &result))
            }
            return result
        }
        internal func TakeNonBlittableStructImpl(_ value: __x_ABI_Ctest__component_CNonBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TakeNonBlittableStruct(pThis, value))
            }
        }
        internal func get_NonBlittableStructPropertyImpl() throws -> __x_ABI_Ctest__component_CNonBlittableStruct {
            var value: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NonBlittableStructProperty(pThis, &value))
            }
            return value
        }
        internal func put_NonBlittableStructPropertyImpl(_ value: __x_ABI_Ctest__component_CNonBlittableStruct) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NonBlittableStructProperty(pThis, value))
            }
        }
        internal func get_StringPropertyImpl() throws -> HSTRING? {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StringProperty(pThis, &value))
            }
            return value
        }
        internal func put_StringPropertyImpl(_ value: HSTRING?) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimple.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StringProperty(pThis, value))
            }
        }
    }

    open class ISimpleDelegate: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CISimpleDelegate }

        open func DoThisImpl() throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoThis(pThis))
            }
        }
        open func DoThatImpl(_ val: INT32) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DoThat(pThis, val))
            }
        }
    }

    private static var ISimpleDelegateVTable: __x_ABI_Ctest__component_CISimpleDelegateVtbl = .init(
        QueryInterface: {
            guard let pUnk = $0, let riid = $1, let ppvObject = $2 else { return E_INVALIDARG }

            guard riid.pointee == IUnknown.IID ||
                  riid.pointee == IInspectable.IID || 
                  riid.pointee == ISwiftImplemented.IID ||
                  riid.pointee == __ABI_test_component.ISimpleDelegateWrapper.IID else { 
                ppvObject.pointee = nil
                return E_NOINTERFACE
            }
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        },

        AddRef: {
             guard let wrapper = ISimpleDelegateWrapper.from_raw($0) else { return 1 }
             _ = wrapper.retain()
             return ULONG(_getRetainCount(wrapper.takeUnretainedValue().swiftObj))
        },

        Release: {
            guard let wrapper = ISimpleDelegateWrapper.from_raw($0) else { return 1 }
            return ULONG(_getRetainCount(wrapper.takeRetainedValue()))
        },

        GetIids: {
            let size = MemoryLayout<IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_test_component.ISimpleDelegateWrapper.IID
            
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("test_component.ISimpleDelegate").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        DoThis: {
            guard let instance = __ABI_test_component.ISimpleDelegateWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }

            instance.DoThis()
            
            return S_OK
        },

        DoThat: {
            guard let instance = __ABI_test_component.ISimpleDelegateWrapper.try_unwrap_from(raw: $0) else { return E_INVALIDARG }
            let val: Int32 = $1

            instance.DoThat(val)
            
            return S_OK
        }
    )

    public class ISimpleDelegateWrapper: WinRTWrapperBase<__x_ABI_Ctest__component_CISimpleDelegate, test_component.ISimpleDelegate> {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CISimpleDelegate }
                
        public init?(impl: test_component.ISimpleDelegate?) {
            guard let impl = impl else { return nil }
            // try to see if already wrapping an ABI pointer and if so, use that
            if let internalImpl = impl as? test_component.Impl.ISimpleDelegateImpl {
                let abi = try? internalImpl.interface.perform(as: __x_ABI_Ctest__component_CISimpleDelegate.self) { $0.pointee }
                guard let abi = abi else { return nil }
                super.init(abi, impl)
            } else {
                let abi = withUnsafeMutablePointer(to: &ISimpleDelegateVTable) {
                    __x_ABI_Ctest__component_CISimpleDelegate(lpVtbl: $0)
                }
                super.init(abi, impl)
            }
        }
    }
    open class IStaticClassStatics: test_component.IInspectable {
        override public class var IID: IID { IID___x_ABI_Ctest__component_CIStaticClassStatics }

        internal func get_EnumPropertyImpl() throws -> __x_ABI_Ctest__component_CFruit {
            var value: __x_ABI_Ctest__component_CFruit = .init(0)
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnumProperty(pThis, &value))
            }
            return value
        }
        internal func put_EnumPropertyImpl(_ value: __x_ABI_Ctest__component_CFruit) throws {
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnumProperty(pThis, value))
            }
        }
        internal func InEnumImpl(_ value: __x_ABI_Ctest__component_CSigned) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InEnum(pThis, value, &result))
            }
            return result
        }
        internal func InNonBlittableStructImpl(_ value: __x_ABI_Ctest__component_CNonBlittableStruct) throws -> HSTRING? {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_Ctest__component_CIStaticClassStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InNonBlittableStruct(pThis, value, &result))
            }
            return result
        }
    }

    public class _ABI_NonBlittableBoolStruct {
        public var val: __x_ABI_Ctest__component_CNonBlittableBoolStruct = .init()
        public init() { } 
        public init(from swift: test_component.NonBlittableBoolStruct) {
            val.First = .init(from: swift.First)
            val.Second = .init(from: swift.Second)
            val.Third = .init(from: swift.Third)
            val.Fourth = .init(from: swift.Fourth)
        }

        public func detach() -> __x_ABI_Ctest__component_CNonBlittableBoolStruct {
            let result = val
            return result
        }

        deinit {
        }
    }
    public class _ABI_NonBlittableStruct {
        public var val: __x_ABI_Ctest__component_CNonBlittableStruct = .init()
        public init() { } 
        public init(from swift: test_component.NonBlittableStruct) {
            val.First = try! HString(swift.First).detach()
            val.Second = try! HString(swift.Second).detach()
            val.Third = swift.Third
            val.Fourth = try! HString(swift.Fourth).detach()
        }

        public func detach() -> __x_ABI_Ctest__component_CNonBlittableStruct {
            let result = val
            val.First = nil
            val.Second = nil
            val.Fourth = nil
            return result
        }

        deinit {
            WindowsDeleteString(val.First)
            WindowsDeleteString(val.Second)
            WindowsDeleteString(val.Fourth)
        }
    }
}
