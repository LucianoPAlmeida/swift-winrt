// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

import TestComponent_CWinRT

extension Fruit {
    public static var Banana : Fruit {
        Fruit_Banana
    }
    public static var Apple : Fruit {
        Fruit_Apple
    }
    public static var Orange : Fruit {
        Fruit_Orange
    }
    public static var Pineapple : Fruit {
        Fruit_Pineapple
    }
}

extension Signed {
    public static var First : Signed {
        Signed_First
    }
    public static var Second : Signed {
        Signed_Second
    }
    public static var Third : Signed {
        Signed_Third
    }
}

extension Unsigned {
    public static var First : Unsigned {
        Unsigned_First
    }
    public static var Second : Unsigned {
        Unsigned_Second
    }
    public static var Third : Unsigned {
        Unsigned_Third
    }
}

public class Class: Equatable {
    internal var interface: IClass

    public init() {
        try! interface = RoActivateInstance(HString("test_component.Class"))
    }

    internal init(_ fromInterface: IClass) {
        interface = fromInterface
    }

    public init(_ name: String) {
        let factory: IClassFactory = try! RoGetActivationFactory(HString("test_component.Class"))
        let _name = try! HString(name)
        let value = try! factory.CreateInstance(_name.get())
        interface = IClass(consuming: value)
    }

    public init(_ name: String, _ fruit: Fruit) {
        let factory: IClassFactory = try! RoGetActivationFactory(HString("test_component.Class"))
        let _name = try! HString(name)
        let value = try! factory.CreateInstance2(_name.get(), fruit)
        interface = IClass(consuming: value)
    }

    private static let statics: IClassStatics = try! RoGetActivationFactory(HString("test_component.Class"))
    public static func StaticTest() {
        try! statics.StaticTest()
    }

    public static func StaticTestReturn() -> Int32 {
        let result = try! statics.StaticTestReturn()
        return result
    }

    public static var StaticProperty : Int32 {
        get {
            let value = try! statics.get_StaticProperty()
            return value
        }

    }

    public func InInt32(_ value: Int32) -> String {
        let result = try! interface.InInt32(value)
        return .init(from: result)
    }

    public func InString(_ value: String) -> String {
        let _value = try! HString(value)
        let result = try! interface.InString(_value.get())
        return .init(from: result)
    }

    public func InEnum(_ value: Signed) -> String {
        let result = try! interface.InEnum(value)
        return .init(from: result)
    }

    public func OutInt32(_ value: inout Int32) {
        try! interface.OutInt32(&value)
    }

    public func OutString(_ value: inout String?) {
        var _value: HSTRING?
        try! interface.OutString(&_value)
        value = .init(from: _value)
        WindowsDeleteString(_value)
    }

    public func OutBlittableStruct(_ value: inout BlittableStruct) {
        var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
        try! interface.OutBlittableStruct(&_value)
        value = unsafeBitCast(_value, to: BlittableStruct.self)
    }

    public func OutNonBlittableStruct(_ value: inout NonBlittableStruct) {
        var _value: _ABI_NonBlittableStruct = .init()
        try! interface.OutNonBlittableStruct(&_value.val)
        value = .init(from: _value.val)
    }

    public func OutEnum(_ value: inout Signed) {
        try! interface.OutEnum(&value)
    }

    public func ReturnEnum() -> Signed {
        let result = try! interface.ReturnEnum()
        return result
    }

    public var EnumProperty : Fruit {
        get {
            let value = try! interface.get_EnumProperty()
            return value
        }

        set {
            try! interface.put_EnumProperty(newValue) 
        }
    }

    public static func == (_ lhs: Class, _ rhs: Class) -> Bool {
        return lhs.interface == rhs.interface
    }
}

public class Simple: Equatable {
    internal var interface: ISimple

    public init() {
        try! interface = RoActivateInstance(HString("test_component.Simple"))
    }

    internal init(_ fromInterface: ISimple) {
        interface = fromInterface
    }

    public func Method() {
        try! interface.Method()
    }

    public func ReturnBlittableStruct() -> BlittableStruct {
        let result = try! interface.ReturnBlittableStruct()
        return unsafeBitCast(result, to: BlittableStruct.self)
    }

    public func TakeBlittableStruct(_ value: BlittableStruct) {
        try! interface.TakeBlittableStruct(unsafeBitCast(value, to: __x_ABI_Ctest__component_CBlittableStruct.self))
    }

    public func ReturnNonBlittableStruct() -> NonBlittableStruct {
        let result = try! interface.ReturnNonBlittableStruct()
        return .init(from: result)
    }

    public func TakeNonBlittableStruct(_ value: NonBlittableStruct) {
        let _value = _ABI_NonBlittableStruct(from: value)
        try! interface.TakeNonBlittableStruct(_value.val)
    }

    public var BlittableStructProperty : BlittableStruct {
        get {
            let value = try! interface.get_BlittableStructProperty()
            return unsafeBitCast(value, to: BlittableStruct.self)
        }

        set {
            try! interface.put_BlittableStructProperty(unsafeBitCast(newValue, to: __x_ABI_Ctest__component_CBlittableStruct.self)) 
        }
    }

    public var NonBlittableStructProperty : NonBlittableStruct {
        get {
            let value = try! interface.get_NonBlittableStructProperty()
            return .init(from: value)
        }

        set {
            let _newValue = _ABI_NonBlittableStruct(from: newValue)
            try! interface.put_NonBlittableStructProperty(_newValue.val) 
        }
    }

    public var StringProperty : String {
        get {
            let value = try! interface.get_StringProperty()
            return .init(from: value)
        }

        set {
            let _newValue = try! HString(newValue)
            try! interface.put_StringProperty(_newValue.get()) 
        }
    }

    public static func == (_ lhs: Simple, _ rhs: Simple) -> Bool {
        return lhs.interface == rhs.interface
    }
}

public class StaticClass {
    private static let statics: IStaticClassStatics = try! RoGetActivationFactory(HString("test_component.StaticClass"))
    public static func InEnum(_ value: Signed) -> String {
        let result = try! statics.InEnum(value)
        return .init(from: result)
    }

    public static func InNonBlittableStruct(_ value: NonBlittableStruct) -> String {
        let _value = _ABI_NonBlittableStruct(from: value)
        let result = try! statics.InNonBlittableStruct(_value.val)
        return .init(from: result)
    }

    public static var EnumProperty : Fruit {
        get {
            let value = try! statics.get_EnumProperty()
            return value
        }

        set {
            try! statics.put_EnumProperty(newValue) 
        }
    }

}

public struct BlittableStruct {
    public var First: Int32 = 0
    public var Second: Int32 = 0
    public init() {}
    public init(First: Int32, Second: Int32) {
        self.First = First
        self.Second = Second
    }
}

public struct NonBlittableBoolStruct {
    public var First: Bool = false
    public var Second: Bool = false
    public var Third: Bool = false
    public var Fourth: Bool = false
    public init() {}
    public init(First: Bool, Second: Bool, Third: Bool, Fourth: Bool) {
        self.First = First
        self.Second = Second
        self.Third = Third
        self.Fourth = Fourth
    }
    internal init(from abi: __x_ABI_Ctest__component_CNonBlittableBoolStruct) {
        self.First = .init(from: abi.First)
        self.Second = .init(from: abi.Second)
        self.Third = .init(from: abi.Third)
        self.Fourth = .init(from: abi.Fourth)
    }
}

public struct NonBlittableStruct {
    public var First: String? = nil
    public var Second: String? = nil
    public var Third: Int32 = 0
    public var Fourth: String? = nil
    public init() {}
    public init(First: String, Second: String, Third: Int32, Fourth: String) {
        self.First = First
        self.Second = Second
        self.Third = Third
        self.Fourth = Fourth
    }
    internal init(from abi: __x_ABI_Ctest__component_CNonBlittableStruct) {
        self.First = .init(from: abi.First)
        self.Second = .init(from: abi.Second)
        self.Third = abi.Third
        self.Fourth = .init(from: abi.Fourth)
    }
}

