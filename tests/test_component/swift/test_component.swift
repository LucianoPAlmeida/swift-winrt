// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

import Ctest_component

public typealias Fruit = __x_ABI_Ctest__component_CFruit
public typealias Signed = __x_ABI_Ctest__component_CSigned
public typealias Unsigned = __x_ABI_Ctest__component_CUnsigned
public class Class: Equatable {
    public var interface: __ABI_test_component.IClass

    public init() {
        try! interface = RoActivateInstance(HString("test_component.Class"))
    }

    public init(_ fromInterface: __ABI_test_component.IClass) {
        interface = fromInterface
    }

    private static let _IClassFactory: __ABI_test_component.IClassFactory = try! RoGetActivationFactory(HString("test_component.Class"))
    public init(_ name: String) {
        let _name = try! HString(name)
        let value = try! Self._IClassFactory.CreateInstanceImpl(_name.get())
        interface = __ABI_test_component.IClass(consuming: value)
    }

    public init(_ name: String, _ fruit: Fruit) {
        let _name = try! HString(name)
        let value = try! Self._IClassFactory.CreateInstance2Impl(_name.get(), fruit)
        interface = __ABI_test_component.IClass(consuming: value)
    }

    private static let _IClassFactory2: __ABI_test_component.IClassFactory2 = try! RoGetActivationFactory(HString("test_component.Class"))
    public init(_ name: String, _ fruit: Fruit, _ implementation: IIAmImplementable) {
        let _name = try! HString(name)
        let implementationWrapper = __ABI_test_component.IIAmImplementableWrapper(impl: implementation)
        let _implementation = try! implementationWrapper?.to_abi { $0 }
        let value = try! Self._IClassFactory2.CreateInstanceImpl(_name.get(), fruit, _implementation)
        interface = __ABI_test_component.IClass(consuming: value)
    }

    private static let _IClassStatics: __ABI_test_component.IClassStatics = try! RoGetActivationFactory(HString("test_component.Class"))
    public static func StaticTest() {
        try! _IClassStatics.StaticTestImpl()
    }

    public static func StaticTestReturn() -> Int32 {
        let result = try! _IClassStatics.StaticTestReturnImpl()
        return result
    }

    public static var StaticProperty : Int32 {
        get {
            let value = try! _IClassStatics.get_StaticPropertyImpl()
            return value
        }

    }

    private static let _IClassStatics2: __ABI_test_component.IClassStatics2 = try! RoGetActivationFactory(HString("test_component.Class"))
    public static func StaticTestReturnFloat() -> Float {
        let result = try! _IClassStatics2.StaticTestReturnFloatImpl()
        return result
    }

    public static var StaticPropertyFloat : Float {
        get {
            let value = try! _IClassStatics2.get_StaticPropertyFloatImpl()
            return value
        }

        set {
            try! _IClassStatics2.put_StaticPropertyFloatImpl(newValue) 
        }
    }

    public func SetDelegate(_ value: ISimpleDelegate) {
        let valueWrapper = __ABI_test_component.ISimpleDelegateWrapper(impl: value)
        let _value = try! valueWrapper?.to_abi { $0 }
        try! interface.SetDelegateImpl(_value)
    }

    public func GetDelegate() -> ISimpleDelegate {
        let result = try! interface.GetDelegateImpl()
        if let _result = __ABI_test_component.ISimpleDelegateWrapper.try_unwrap_from(abi: result) { return _result } 
        return Impl.ISimpleDelegateImpl(result)
    }

    public func InInt32(_ value: Int32) -> String {
        let result = try! interface.InInt32Impl(value)
        return .init(from: result)
    }

    public func InString(_ value: String) -> String {
        let _value = try! HString(value)
        let result = try! interface.InStringImpl(_value.get())
        return .init(from: result)
    }

    public func InEnum(_ value: Signed) -> String {
        let result = try! interface.InEnumImpl(value)
        return .init(from: result)
    }

    public func OutInt32(_ value: inout Int32) {
        try! interface.OutInt32Impl(&value)
    }

    public func OutString(_ value: inout String?) {
        var _value: HSTRING?
        try! interface.OutStringImpl(&_value)
        value = .init(from: _value)
        WindowsDeleteString(_value)
    }

    public func OutBlittableStruct(_ value: inout BlittableStruct) {
        var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
        try! interface.OutBlittableStructImpl(&_value)
        value = unsafeBitCast(_value, to: test_component.BlittableStruct.self)
    }

    public func OutNonBlittableStruct(_ value: inout NonBlittableStruct) {
        let _value: __ABI_test_component._ABI_NonBlittableStruct = .init()
        try! interface.OutNonBlittableStructImpl(&_value.val)
        value = .init(from: _value.val)
    }

    public func OutEnum(_ value: inout Signed) {
        try! interface.OutEnumImpl(&value)
    }

    public func ReturnEnum() -> Signed {
        let result = try! interface.ReturnEnumImpl()
        return result
    }

    public func ReturnChar() -> Character {
        let result = try! interface.ReturnCharImpl()
        return .init(from: result)
    }

    public func InChar(_ value: Character) -> String {
        let result = try! interface.InCharImpl(.init(from: value))
        return .init(from: result)
    }

    public func OutChar(_ value: inout Character) {
        var _value: WCHAR = .init()
        try! interface.OutCharImpl(&_value)
        value = .init(from: _value)
    }

    public var EnumProperty : Fruit {
        get {
            let value = try! interface.get_EnumPropertyImpl()
            return value
        }

        set {
            try! interface.put_EnumPropertyImpl(newValue) 
        }
    }

    public var Implementation : IBasic {
        get {
            let value = try! interface.get_ImplementationImpl()
            if let _value = __ABI_test_component.IBasicWrapper.try_unwrap_from(abi: value) { return _value } 
        return Impl.IBasicImpl(value)
        }

        set {
            let wrapper = __ABI_test_component.IBasicWrapper(impl: newValue)
            let _newValue = try! wrapper?.to_abi { $0 }
            try! interface.put_ImplementationImpl(_newValue) 
        }
    }

    public var StartValue : Int32? {
        get {
            let value = try! interface.get_StartValueImpl()
            return .init(ref: value)
        }

        set {
            let wrapper = __ABI_test_component.__x_ABI_C__FIReference_1_intWrapper(value: newValue)
            let _newValue = try! wrapper?.to_abi { $0 }
            try! interface.put_StartValueImpl(_newValue) 
        }
    }

    internal lazy var _IBasic: __ABI_test_component.IBasic = try! interface.QueryInterface()
    public func Method() {
        try! _IBasic.MethodImpl()
    }

    public static func == (_ lhs: Class, _ rhs: Class) -> Bool {
        return lhs.interface == rhs.interface
    }
}

public class Simple: Equatable {
    public var interface: __ABI_test_component.ISimple

    public init() {
        try! interface = RoActivateInstance(HString("test_component.Simple"))
    }

    public init(_ fromInterface: __ABI_test_component.ISimple) {
        interface = fromInterface
    }

    public func Method() {
        try! interface.MethodImpl()
    }

    public func ReturnBlittableStruct() -> BlittableStruct {
        let result = try! interface.ReturnBlittableStructImpl()
        return unsafeBitCast(result, to: test_component.BlittableStruct.self)
    }

    public func TakeBlittableStruct(_ value: BlittableStruct) {
        try! interface.TakeBlittableStructImpl(unsafeBitCast(value, to: __x_ABI_Ctest__component_CBlittableStruct.self))
    }

    public func ReturnNonBlittableStruct() -> NonBlittableStruct {
        let result = try! interface.ReturnNonBlittableStructImpl()
        return .init(from: result)
    }

    public func TakeNonBlittableStruct(_ value: NonBlittableStruct) {
        let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
        try! interface.TakeNonBlittableStructImpl(_value.val)
    }

    public var BlittableStructProperty : BlittableStruct {
        get {
            let value = try! interface.get_BlittableStructPropertyImpl()
            return unsafeBitCast(value, to: test_component.BlittableStruct.self)
        }

        set {
            try! interface.put_BlittableStructPropertyImpl(unsafeBitCast(newValue, to: __x_ABI_Ctest__component_CBlittableStruct.self)) 
        }
    }

    public var NonBlittableStructProperty : NonBlittableStruct {
        get {
            let value = try! interface.get_NonBlittableStructPropertyImpl()
            return .init(from: value)
        }

        set {
            let _newValue = __ABI_test_component._ABI_NonBlittableStruct(from: newValue)
            try! interface.put_NonBlittableStructPropertyImpl(_newValue.val) 
        }
    }

    public var StringProperty : String {
        get {
            let value = try! interface.get_StringPropertyImpl()
            return .init(from: value)
        }

        set {
            let _newValue = try! HString(newValue)
            try! interface.put_StringPropertyImpl(_newValue.get()) 
        }
    }

    public static func == (_ lhs: Simple, _ rhs: Simple) -> Bool {
        return lhs.interface == rhs.interface
    }
}

public class StaticClass {
    private static let _IStaticClassStatics: __ABI_test_component.IStaticClassStatics = try! RoGetActivationFactory(HString("test_component.StaticClass"))
    public static func InEnum(_ value: Signed) -> String {
        let result = try! _IStaticClassStatics.InEnumImpl(value)
        return .init(from: result)
    }

    public static func InNonBlittableStruct(_ value: NonBlittableStruct) -> String {
        let _value = __ABI_test_component._ABI_NonBlittableStruct(from: value)
        let result = try! _IStaticClassStatics.InNonBlittableStructImpl(_value.val)
        return .init(from: result)
    }

    public static var EnumProperty : Fruit {
        get {
            let value = try! _IStaticClassStatics.get_EnumPropertyImpl()
            return value
        }

        set {
            try! _IStaticClassStatics.put_EnumPropertyImpl(newValue) 
        }
    }

}

public struct BlittableStruct {
    public var First: Int32 = 0
    public var Second: Int32 = 0
    public init() {}
    public init(First: Int32, Second: Int32) {
        self.First = First
        self.Second = Second
    }
}

public struct NonBlittableBoolStruct {
    public var First: Bool = false
    public var Second: Bool = false
    public var Third: Bool = false
    public var Fourth: Bool = false
    public init() {}
    public init(First: Bool, Second: Bool, Third: Bool, Fourth: Bool) {
        self.First = First
        self.Second = Second
        self.Third = Third
        self.Fourth = Fourth
    }
    public init(from abi: __x_ABI_Ctest__component_CNonBlittableBoolStruct) {
        self.First = .init(from: abi.First)
        self.Second = .init(from: abi.Second)
        self.Third = .init(from: abi.Third)
        self.Fourth = .init(from: abi.Fourth)
    }
}

public struct NonBlittableStruct {
    public var First: String?
    public var Second: String?
    public var Third: Int32 = 0
    public var Fourth: String?
    public init() {}
    public init(First: String, Second: String, Third: Int32, Fourth: String) {
        self.First = First
        self.Second = Second
        self.Third = Third
        self.Fourth = Fourth
    }
    public init(from abi: __x_ABI_Ctest__component_CNonBlittableStruct) {
        self.First = .init(from: abi.First)
        self.Second = .init(from: abi.Second)
        self.Third = abi.Third
        self.Fourth = .init(from: abi.Fourth)
    }
}

public typealias IBasic = test_component.IBasicPrototype

public typealias IIAmImplementable = test_component.IIAmImplementablePrototype

public typealias ISimpleDelegate = test_component.ISimpleDelegatePrototype

public enum Impl {
        public class IBasicImpl : IBasic {
            public var interface: __ABI_test_component.IBasic
            public init(_ fromAbi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIBasic>?) {
                interface = __ABI_test_component.IBasic(fromAbi)
            }
            public func Method() {
                try! interface.MethodImpl()
            }

        }

        public class IIAmImplementableImpl : IIAmImplementable {
            public var interface: __ABI_test_component.IIAmImplementable
            public init(_ fromAbi: UnsafeMutablePointer<__x_ABI_Ctest__component_CIIAmImplementable>?) {
                interface = __ABI_test_component.IIAmImplementable(fromAbi)
            }
            public func InInt32(_ value: Int32) -> String {
                let result = try! interface.InInt32Impl(value)
                return .init(from: result)
            }

            public func InString(_ value: String) -> String {
                let _value = try! HString(value)
                let result = try! interface.InStringImpl(_value.get())
                return .init(from: result)
            }

            public func InEnum(_ value: Signed) -> String {
                let result = try! interface.InEnumImpl(value)
                return .init(from: result)
            }

            public func OutInt32(_ value: inout Int32) {
                try! interface.OutInt32Impl(&value)
            }

            public func OutString(_ value: inout String?) {
                var _value: HSTRING?
                try! interface.OutStringImpl(&_value)
                value = .init(from: _value)
                WindowsDeleteString(_value)
            }

            public func OutBlittableStruct(_ value: inout BlittableStruct) {
                var _value: __x_ABI_Ctest__component_CBlittableStruct = .init()
                try! interface.OutBlittableStructImpl(&_value)
                value = unsafeBitCast(_value, to: test_component.BlittableStruct.self)
            }

            public func OutNonBlittableStruct(_ value: inout NonBlittableStruct) {
                let _value: __ABI_test_component._ABI_NonBlittableStruct = .init()
                try! interface.OutNonBlittableStructImpl(&_value.val)
                value = .init(from: _value.val)
            }

            public func OutEnum(_ value: inout Signed) {
                try! interface.OutEnumImpl(&value)
            }

            public func ReturnEnum() -> Signed {
                let result = try! interface.ReturnEnumImpl()
                return result
            }

            public var EnumProperty : Fruit {
                get {
                    let value = try! interface.get_EnumPropertyImpl()
                    return value
                }

                set {
                    try! interface.put_EnumPropertyImpl(newValue) 
                }
            }

        }

        public class ISimpleDelegateImpl : ISimpleDelegate {
            public var interface: __ABI_test_component.ISimpleDelegate
            public init(_ fromAbi: UnsafeMutablePointer<__x_ABI_Ctest__component_CISimpleDelegate>?) {
                interface = __ABI_test_component.ISimpleDelegate(fromAbi)
            }
            public func DoThis() {
                try! interface.DoThisImpl()
            }

            public func DoThat(_ val: Int32) {
                try! interface.DoThatImpl(val)
            }

        }

}
public protocol IBasicPrototype : IWinRTObject { 
        func Method() 
}
extension IBasicPrototype {
    public static var none: IBasicPrototype {
        test_component.Impl.IBasicImpl(nil)
    }
}

public protocol IIAmImplementablePrototype : IWinRTObject { 
        func InInt32(_ value: Int32) -> String 
        func InString(_ value: String) -> String 
        func InEnum(_ value: test_component.Signed) -> String 
        func OutInt32(_ value: inout Int32) 
        func OutString(_ value: inout String?) 
        func OutBlittableStruct(_ value: inout test_component.BlittableStruct) 
        func OutNonBlittableStruct(_ value: inout test_component.NonBlittableStruct) 
        func OutEnum(_ value: inout test_component.Signed) 
        func ReturnEnum() -> test_component.Signed 
        var EnumProperty: test_component.Fruit { get set }
}
extension IIAmImplementablePrototype {
    public static var none: IIAmImplementablePrototype {
        test_component.Impl.IIAmImplementableImpl(nil)
    }
}

public protocol ISimpleDelegatePrototype : IWinRTObject { 
        func DoThis() 
        func DoThat(_ val: Int32) 
}
extension ISimpleDelegatePrototype {
    public static var none: ISimpleDelegatePrototype {
        test_component.Impl.ISimpleDelegateImpl(nil)
    }
}

extension test_component.Fruit {
    public static var Banana : test_component.Fruit {
        Fruit_Banana
    }
    public static var Apple : test_component.Fruit {
        Fruit_Apple
    }
    public static var Orange : test_component.Fruit {
        Fruit_Orange
    }
    public static var Pineapple : test_component.Fruit {
        Fruit_Pineapple
    }
}

extension test_component.Signed {
    public static var First : test_component.Signed {
        Signed_First
    }
    public static var Second : test_component.Signed {
        Signed_Second
    }
    public static var Third : test_component.Signed {
        Signed_Third
    }
}

extension test_component.Unsigned {
    public static var First : test_component.Unsigned {
        Unsigned_First
    }
    public static var Second : test_component.Unsigned {
        Unsigned_Second
    }
    public static var Third : test_component.Unsigned {
        Unsigned_Third
    }
}

fileprivate extension Int32 {
    init?(ref: UnsafeMutablePointer<__x_ABI_C__FIReference_1_int>?) {
        guard let val = ref else { return nil }
        var result: INT32 = .init()
        try! CHECKED(val.pointee.lpVtbl.pointee.get_Value(val, &result))
        self.init(result)
    }
} 
